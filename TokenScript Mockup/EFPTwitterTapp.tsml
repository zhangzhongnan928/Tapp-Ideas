<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ts:token xmlns:ts="http://tokenscript.org/2020/06/tokenscript"
    xmlns:ethereum="http://tokenscript.org/2020/06/ethereum"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://tokenscript.org/2020/06/tokenscript http://tokenscript.org/2020/06/tokenscript.xsd"
    custodian="false"
>
    <ts:name>
        <ts:string xml:lang="en">EFP Twitter Tapp</ts:string>
    </ts:name>
    <ts:contract interface="erc721" name="EFPListNFT">
        <ts:address network="8453">0x0E688f5DCa4a0a4729946ACbC44C792341714e08</ts:address>
    </ts:contract>
    <ts:contract name="ENSlistRecords">
        <ts:address network="8453">0x41Aa48Ef3c0446b46a5b1cc6337FF3d3716E2A33</ts:address>
    </ts:contract>
    <ts:contract interface="erc721" name="Basenames">
        <ts:address network="8453">0x03c4738ee98ae44591e1a4a4f3cab6641d95dd9a</ts:address>
    </ts:contract>
    
    <ts:origins>
        <ts:ethereum contract="EFPListNFT"/>
        <ts:ethereum contract="ENSlistRecords"/>
        <ts:ethereum contract="Basenames"/>
    </ts:origins>
    
    <ts:cards>
        <ts:card name="follow" type="action">
            <ts:label>
                <ts:string xml:lang="en">Follow</ts:string>
            </ts:label>
            <ts:attribute name="addressToFollow">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
                <ts:origins>
                    <ethereum:call as="address" contract="Basenames" function="ownerOf">
                        <ethereum:data>
                            <ethereum:uint256>tokenId</ethereum:uint256>
                        </ethereum:data>
                    </ethereum:call>
                </ts:origins>
            </ts:attribute>
            <ts:transaction>
                <ethereum:transaction contract="ENSlistRecords" function="applyListOp">
                    <ethereum:data>
                        <ethereum:uint256>0</ethereum:uint256>
                        <ethereum:bytes>0x01010101${addressToFollow}0000000000000000</ethereum:bytes>
                    </ethereum:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <script type="text/javascript">
                    class Token {
                        constructor(tokenInstance) {
                            this.props = tokenInstance;
                        }
                        
                        followUser() {
                            window.onConfirm = function() {
                                window.close();
                            }
                            window.onError = function(error) {
                                console.log(error);
                                window.close();
                            }
                            const addressToFollow = this.props.addressToFollow;
                            web3.tokens.callFunction(this.props, 'follow', 'followUser', [addressToFollow]);
                        }
                    }
                    
                    web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenCardId) => {
                        const currentTokenInstance = updatedTokens.currentInstance;
                        document.getElementById(tokenCardId).innerHTML = new Token(currentTokenInstance).render();
                    };
                </script>
                <div id="followCard">
                    <p>Follow the Basename owner:</p>
                    <p>Address to follow: <span id="addressToFollow">{{addressToFollow}}</span></p>
                    <button onclick="(() => { new Token(this.props).followUser(); })()">Follow User</button>
                </div>
            </ts:view>
        </ts:card>
        
        <ts:card name="generateTLink" type="action">
            <ts:label>
                <ts:string xml:lang="en">Generate Your Own TLink</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                    .button { margin: 10px; padding: 10px; background-color: #1DA1F2; color: white; border: none; border-radius: 5px; }
                </style>
                <div>
                    <button class="button" onclick="createTLink()">Generate TLink</button>
                    <p>Your TLink: <span id="tlinkResult"></span></p>
                </div>
            </ts:view>
        </ts:card>
    </ts:cards>
    
    <ts:attribute-types>
        <ts:attribute-type id="ownerOf" syntax="1.3.6.1.4.1.1466.115.121.1.15">
            <ts:name>
                <ts:string xml:lang="en">Owner Address</ts:string>
            </ts:name>
            <ts:origins>
                <ethereum:call as="address" contract="Basenames" function="ownerOf">
                    <ethereum:data>
                        <ethereum:uint256>tokenId</ethereum:uint256>
                    </ethereum:data>
                </ethereum:call>
            </ts:origins>
        </ts:attribute-type>
    </ts:attribute-types>
    
    <ts:actions>
        <ts:action>
            <ts:name>createTLink</ts:name>
            <ts:attribute-type id="userAddress" syntax="1.3.6.1.4.1.1466.115.121.1.15"/>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <script type="text/javascript">
                    function generateTLink() {
                        var baseUrl = "https://t.link/";
                        var tappUrl = encodeURIComponent("https://example.com/efp-tapp");
                        var userAddress = document.getElementById('userAddress').innerText;
                        if (!userAddress) {
                            alert("Error: User address not found");
                            return;
                        }
                        var tlink = baseUrl + "?url=" + tappUrl + "&amp;address=" + userAddress;
                        document.getElementById('tlinkResult').innerText = tlink;
                    }
                </script>
                <div>
                    <p>Your Ethereum Address: <span id="userAddress">{{userAddress}}</span></p>
                    <button onclick="generateTLink()">Generate TLink</button>
                    <p>Your TLink: <span id="tlinkResult"></span></p>
                </div>
            </ts:view>
        </ts:action>
        <ts:action>
            <ts:name>followUser</ts:name>
            <ts:attribute-type id="addressToFollow" syntax="1.3.6.1.4.1.1466.115.121.1.15">
                <ts:origins>
                    <ts:user-entry as="address"/>
                </ts:origins>
            </ts:attribute-type>
            <ts:attribute-type id="userAddress" syntax="1.3.6.1.4.1.1466.115.121.1.15">
                <ts:origins>
                    <ethereum:call function="ownerOf" contract="EFPListNFT" as="ownerOf">
                        <ethereum:uint256 name="tokenId"/>
                    </ethereum:call>
                </ts:origins>
            </ts:attribute-type>
            <ts:attribute-type id="slot" syntax="1.3.6.1.4.1.1466.115.121.1.27">
                <ts:origins>
                    <ts:user-entry as="uint"/>
                </ts:origins>
            </ts:attribute-type>
            <ts:transaction>
                <ethereum:transaction contract="ENSlistRecords" function="applyListOps">
                    <ethereum:data>
                        <ethereum:uint256>slot</ethereum:uint256>
                        <ethereum:array>
                            <ethereum:bytes>0x01010101${addressToFollow}0000000000000000</ethereum:bytes>
                        </ethereum:array>
                    </ethereum:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <script type="text/javascript">
                    function followUser() {
                        var addressToFollow = document.getElementById('addressToFollow').value;
                        var userAddress = document.getElementById('userAddress').innerText;
                        var slot = document.getElementById('slot').value;
                        if (!addressToFollow || !userAddress || !slot) {
                            alert("Error: Missing required information");
                            return;
                        }
                        // Call the smart contract function here
                        console.log("Following user:", addressToFollow);
                        console.log("User address:", userAddress);
                        console.log("Slot:", slot);
                    }
                </script>
                <div>
                    <p>Your Ethereum Address: <span id="userAddress">{{userAddress}}</span></p>
                    <input id="addressToFollow" type="text" placeholder="Enter address to follow"/>
                    <input id="slot" type="number" placeholder="Enter slot number"/>
                    <button onclick="followUser()">Follow User</button>
                </div>
            </ts:view>
        </ts:action>
    </ts:actions>
</ts:token>
